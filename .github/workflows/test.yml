name: test
on: [ 'pull_request' ]

jobs:
  linux-all:
    strategy:
      fail-fast: false
      matrix:
        dbimage:
          - postgres:14
          - postgres:13
          - postgres:11
        dbauth:
          - trust
          - md5
          - scram-sha-256
        swiftver:
          - swift:5.2
          - swift:5.5
          - swift:5.6
          - swiftlang/swift:nightly-main
        swiftos:
          - focal
        include:
          - swiftver: swift:5.2
            test_flag: --enable-test-discovery
    container: ${{ format('{0}-{1}', matrix.swiftver, matrix.swiftos) }}
    runs-on: ubuntu-latest
    env:
      LOG_LEVEL: debug
      POSTGRES_DB_A: 'test_database'
      POSTGRES_DB_B: 'test_database'
      POSTGRES_USER_A: 'test_username'
      POSTGRES_USER_B: 'test_username'
      POSTGRES_PASSWORD_A: 'test_password'
      POSTGRES_PASSWORD_B: 'test_password'
      POSTGRES_HOSTNAME_A: 'psql-a'
      POSTGRES_HOSTNAME_B: 'psql-b'
      POSTGRES_HOST_AUTH_METHOD: ${{ matrix.dbauth }}
    services:
      psql-a:
        image: ${{ matrix.dbimage }}
        env:
          POSTGRES_USER: 'test_username'
          POSTGRES_DB: 'test_database'
          POSTGRES_PASSWORD: 'test_password'
          POSTGRES_HOST_AUTH_METHOD: ${{ matrix.dbauth }}
          POSTGRES_INITDB_ARGS: --auth-host=${{ matrix.dbauth }}
      psql-b:
        image: ${{ matrix.dbimage }}
        env:
          POSTGRES_USER: 'test_username'
          POSTGRES_DB: 'test_database'
          POSTGRES_PASSWORD: 'test_password'
          POSTGRES_HOST_AUTH_METHOD: ${{ matrix.dbauth }}
          POSTGRES_INITDB_ARGS: --auth-host=${{ matrix.dbauth }}
    steps:
      - name: Check out package
        uses: actions/checkout@v3
      - name: Run all tests with Thread Sanitizer
        run: swift test ${{ matrix.test_flag }} --sanitize=thread

  macos-all:
    strategy:
      fail-fast: false
      matrix:
        # Only test latest version and one auth method on macOS
        dbimage:
          - postgresql@14
        dbauth:
          - scram-sha-256
        xcode:
          - latest-stable
          #- latest
    runs-on: macos-11
    env:
      LOG_LEVEL: debug
      POSTGRES_HOSTNAME_A: 127.0.0.1
      POSTGRES_HOSTNAME_B: 127.0.0.1
      POSTGRES_USER_A: 'test_username'
      POSTGRES_USER_B: 'test_username'
      POSTGRES_PASSWORD_A: 'test_password'
      POSTGRES_PASSWORD_B: 'test_password'
      POSTGRES_DB_A: 'test_database_a'
      POSTGRES_DB_B: 'test_database_b'
    steps:
      - name: Select latest available Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ matrix.xcode }}
      - name: Install Postgres, setup DB and auth, and wait for server start
        run: |
          export PATH="$(brew --prefix)/opt/${{ matrix.dbimage }}/bin:$PATH" PGDATA=/tmp/vapor-postgres-test PGUSER=postgres
          (brew unlink postgresql || true) && brew install ${{ matrix.dbimage }} && brew link --force ${{ matrix.dbimage }}
          initdb --locale=C --auth-host ${{ matrix.dbauth }} --username=postgres --pwfile=<(echo postgres)
          pg_ctl start --wait
          psql postgres <<<"CREATE ROLE $POSTGRES_USER_A LOGIN PASSWORD '$POSTGRES_PASSWORD_A';"
          psql postgres <<<"CREATE ROLE $POSTGRES_USER_B LOGIN PASSWORD '$POSTGRES_PASSWORD_B';"
          psql postgres <<<"CREATE DATABASE $POSTGRES_DB_A OWNER = $POSTGRES_USER_A;"
          psql postgres <<<"CREATE DATABASE $POSTGRES_DB_B OWNER = $POSTGRES_USER_B;"
          psql $POSTGRES_DB_A <<<"ALTER SCHEMA public OWNER TO $POSTGRES_USER_A;"
          psql $POSTGRES_DB_B <<<"ALTER SCHEMA public OWNER TO $POSTGRES_USER_B;"
        timeout-minutes: 2
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Run all tests with Thread Sanitizer
        run: |
          swift test --sanitize=thread -Xlinker -rpath \
                -Xlinker $(xcode-select -p)/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift-5.5/macosx
