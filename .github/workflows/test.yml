name: Test Matrix

on:
  pull_request:
  push:
    branches:
    - master

defaults:
  run:
    shell: bash

jobs:

  Linux:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        image:
          # 5.2 Stable
          - swift:5.2-xenial
          - swift:5.2-bionic
          # 5.2 Unstable
          - swiftlang/swift:nightly-5.2-xenial
          - swiftlang/swift:nightly-5.2-bionic
          # 5.3 Unstable
          - swiftlang/swift:nightly-5.3-xenial
          - swiftlang/swift:nightly-5.3-bionic
          # Master Unsable
          - swiftlang/swift:nightly-master-xenial
          - swiftlang/swift:nightly-master-bionic
          - swiftlang/swift:nightly-master-focal
          - swiftlang/swift:nightly-master-centos8
          - swiftlang/swift:nightly-master-amazonlinux2
        dbimage: 
          - postgres:11
          - postgres:12
          - postgres:13
        include:
          - depscmd: 'apt-get -q update && apt-get -q install -y postgresql-client'
          - image: swiftlang/swift:nightly-master-centos8
            depscmd: 'dnf install -y postgresql'
          - image: swiftlang/swift:nightly-master-amazonlinux2
            depscmd: 'yum install -y postgresql'
    container: ${{ matrix.image }}
    services:
      postgres-a:
        image: ${{ matrix.dbimage }}
        env: { POSTGRES_USER: vapor_username, POSTGRES_PASSWORD: vapor_password, POSTGRES_DB: vapor_database }
      postgres-b:
        image: ${{ matrix.dbimage }}
        env: { POSTGRES_USER: vapor_username, POSTGRES_PASSWORD: vapor_password, POSTGRES_DB: vapor_database }
    env:
      POSTGRES_HOSTNAME_A: postgres-a
      POSTGRES_HOSTNAME_B: postgres-b
      PGUSER: vapor_username
      PGPASSWORD: vapor_password
    steps:
      - name: Install dependencies
        run: ${{ matrix.depscmd }}
      - name: Compensate for AmazonLinux2's Postgres
        if: ${{ endsWith(matrix.image, 'amazonlinux2') }}
        run: printf '#!/bin/bash\nexec psql "$@" </dev/null\n' >/usr/bin/pg_isready && chmod 0755 /usr/bin/pg_isready
      - name: Wait for database servers to be ready
        run: until pg_isready -hpostgres-a -dvapor_database && pg_isready -hpostgres-b -dvapor_database; do sleep 1; done
        timeout-minutes: 2
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Run tests with Thread Sanitizer
        run: swift test --enable-test-discovery --sanitize=thread

  macOS:
    strategy:
      fail-fast: false
      matrix:
        include: 
          - formula: postgresql@11
            datadir: postgresql@11
          - formula: postgresql@12
            datadir: postgres
    env:
      POSTGRES_DATABASE_A: vapor_database_a
      POSTGRES_DATABASE_B: vapor_database_b
    runs-on: macos-latest
    steps:
      - name: Select latest available Xcode
        uses: maxim-lobanov/setup-xcode@1.0
        with: { 'xcode-version': 'latest' }
      - name: Replace Postgres install and start server
        run: |
          brew uninstall --force postgresql php && rm -rf /usr/local/{etc,var}/{postgres,pg}*
          brew install ${{ matrix.formula }} && brew link --force ${{ matrix.formula }}
          initdb --locale=C -E UTF-8 $(brew --prefix)/var/${{ matrix.datadir }}
          brew services start ${{ matrix.formula }}
      - name: Wait for server to be ready
        run: until pg_isready; do sleep 1; done
        timeout-minutes: 2
      - name: Setup users and databases for Postgres
        run: |
          createuser --createdb --login vapor_username
          for db in vapor_database_{a,b}; do
            createdb -Ovapor_username $db && psql $db <<<"ALTER SCHEMA public OWNER TO vapor_username;"
          done
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Run tests with Thread Sanitizer
        run: swift test --enable-test-discovery --sanitize=thread
