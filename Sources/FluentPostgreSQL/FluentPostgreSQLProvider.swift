/// Adds Fluent PostgreSQL's services to your project.
public final class FluentPostgreSQLProvider: Provider {
    let defaultIdentifier: DatabaseIdentifier<PostgreSQLDatabase>
    
    /// Creates a new `FluentPostgreSQLProvider`
    ///
    /// - Parameters:
    ///   - enableIdentityColumns: If true, `GENERATED BY DEFAULT AS IDENTITY` will be used.
    ///                          `true` by default.
    ///   - defaultIdentifier: Set the default identifier for the required Database.
    public init(enableIdentityColumns: Bool? = nil, defaultIdentifier: DatabaseIdentifier<PostgreSQLDatabase> = .psql) {
        self.defaultIdentifier = defaultIdentifier
        
        if let enableIdentityColumns = enableIdentityColumns {
            _globalEnableIdentityColumns = enableIdentityColumns
        }
    }

    /// See `Provider`.
    public func register(_ services: inout Services) throws {
        try services.register(FluentProvider())
        try services.register(PostgreSQLProvider(defaultIdentifier: defaultIdentifier))
    }

    /// See `Provider`.
    public func willBoot(_ worker: Container) throws -> Future<Void> {
        return worker.withPooledConnection(to: self.defaultIdentifier) { conn in
            return FluentPostgreSQLProvider._setup(on: conn)
        }
    }

    public static func _setup(on conn: PostgreSQLConnection) -> Future<Void> {
        struct Setting: Codable {
            var version: String
        }
        return conn.select().column(.function("current_setting", [.expression(.literal(.string("server_version")))], as: .identifier("version"))).all(decoding: Setting.self).map { rows in
            _serverVersion = rows[0].version
            if let versionString = _serverVersion {
                let pointIndex = versionString.index(of: ".") ?? versionString.endIndex
                let majorVersion = versionString[..<pointIndex]
                if let ver = Int(majorVersion) {
                    _globalEnableIdentityColumns = ver < 10 ? false: _globalEnableIdentityColumns
                }
            }
        }
    }

    /// See `Provider`.
    public func didBoot(_ worker: Container) throws -> Future<Void> {
        return .done(on: worker)
    }
}

/// server version string
internal var _serverVersion: String?
/// Enabled by default
internal var _globalEnableIdentityColumns: Bool = true
